#+title: Used Cars
#+author: Russell Helmstedter
#+date: <2024-03-06 Wed>

* The Original Problem
The inspiration for this came from the following problem from [[http://cpm.org][CPM]].

*HOW MUCH IS THAT CAR?*

Nate and Rick were discussing cars again.  Nate claimed that cars with low odometer readings were more expensive than cars with higher odometer readings.  His evidence was that his car with 23,000 miles was worth more than Rick's car with 31,000 miles. To investigate Nate's claim, the boys collected data from several car advertisements and found the information in the table at right. Does the information in the table support Nate's claim?  That is, do you believe Nate's claim that cars with a lower odometer reading cost more money?

| Odometer Reading | Price  |
|------------------+--------|
| 35,000           | 38,000 |
| 55,000           | 16,000 |
| 6,000            | 50,000 |
| 28,000           | 30,000 |
| 50,000           | 26,000 |
| 31,000           | 35,000 |
| 15,000           | 28,000 |
| 99,000           | 10,000 |
| 99,000           | 13,000 |

I like this problem, but I thought it would be nicer to use actual data. So I decided we should use python to build a webscaper for [[https://www.autotrader.com][Autotrader.com]].

Here is the [[file:used_cars.py][full Script]].

* A Breakdown of the Code
Unfortunately, the school district where I work blocks the inspect tool so students can't actually write this code with me. As a result, I ended up writing the webscraper myself and walked the students through the design choices I made.

** The Imports
We needed to scrape the website and then parse the html. Nothing better than ~requests~ and ~bs4~ for that. After parsing the html, we used ~json~ to convert from the html data to a python dictionary. Finally, we saved the data in a csv file so we can open it in google sheets.

#+begin_src python exports: code
import requests
import json
from bs4 import BeautifulSoup
import csv
#+end_src



** The Soup
This url gaves us the first 100 cars available in our zip code. So we cal the ~requests.get()~ method.

#+begin_src python exports: code
URL = "https://www.autotrader.com/cars-for-sale/ventura-ca?newSearch=false&numRecords=100&zip=93001"
page = requests.get(URL)
#+end_src

Next we made the soup. This part took awhile. We found that every car on the website was saved in that crazy looking class ~"col-xs-12 display-flex col-sm-4"~ . So using the ~find_all~ method returned a list of all of the cars.

#+Begin_src python exports: code
soup = BeautifulSoup(page.content, "html.parser")
cars = soup.find_all("div", class_="col-xs-12 display-flex col-sm-4")
#+end_src

** Sample Car
We had to visually parse the json and figure out what information we wanted. Using pretty printing, we got this:

#+begin_src python
{'@context': 'http://schema.org/',
 '@type': ['Product', 'Car'],
 'brand': {'@context': 'http://schema.org/',
           '@type': 'Brand',
           'name': {'code': 'MB', 'name': 'Mercedes-Benz'}},
 'color': 'Gold',
 'description': 'Location: Ventura, CA. This 1992 [object Object] [object '
                'Object] is listed for $4495',
 'driveWheelConfiguration': '2 Wheel Drive - Rear',
 'fuelEfficiency': '13 City / 17 Highway',
 'fuelType': {'code': 'G', 'group': 'Gas', 'name': 'Gasoline'},
 'image': 'https://assets.cai-media-management.com/ps-vehicle-media/297f5e02-cffc-428c-b867-9bce40ea9151.jpg',
 'manufacturer': {'@context': 'http://schema.org/',
                  '@type': 'Organization',
                  'name': {'code': 'MB', 'name': 'Mercedes-Benz'}},
 'mileageFromOdometer': {'@type': 'QuantitativeValue', 'value': '101,700'},
 'model': {'code': '500SL', 'name': '500 SL'},
 'mpn': 'Used 1992 Mercedes-Benz 500 SL',
 'name': 'Used 1992 Mercedes-Benz 500 SL',
 'offers': {'@type': 'Offer',
            'availability': 'http://schema.org/InStock',
            'itemCondition': 'http://schema.org/UsedCondition',
            'price': 4495,
            'priceCurrency': 'USD',
            'seller': {'@context': 'http://schema.org/',
                       '@type': 'AutoDealer',
                       'address': {'@context': 'http://schema.org/',
                                   '@type': 'PostalAddress',
                                   'addressLocality': 'Ventura',
                                   'addressRegion': 'CA',
                                   'postalCode': '93001',
                                   'streetAddress': ''},
                       'name': 'Private Seller Exchange',
                       'telephone': ''},
            'url': 'https://www.autotrader.com/cars-for-sale/vehicle/708536463'},
 'productionDate': 1992,
 'sku': 708536463,
 'url': 'https://www.autotrader.com/cars-for-sale/vehicle/708536463',
 'vehicleEngine': '8-Cylinder',
 'vehicleIdentificationNumber': 'WDBFA66E4NF053333',
 'vehicleInteriorColor': 'Tan',
 'vehicleTransmission': '4-Speed Automatic'}
#+end_src

We decided to pull the following information, ~["brand", "model", "color", "mpg", "fuel_type", "full_name", "price", "mileage", "year"]~.

** The CSV File
This became our fieldnames when we wrote to a csv file. We looped over the list return from ~soup.find_all(...)~. For each item we try to pull out all of the information. Some of the cars were either poorly formatted on the website, so we had to use a try/except block incase we got an ~AttributeError~. Finally, we used a dicitionary comprehension to write the data to the appropriate fieldname.

#+begin_src python exports: code
with open("used_cars.csv", mode="w") as used_car_db:
    fieldnames = [
        "brand",
        "model",
        "color",
        "mpg",
        "fuel_type",
        "full_name",
        "price",
        "mileage",
        "year",
    ]
    car_writer = csv.DictWriter(used_car_db, fieldnames=fieldnames)
    for car in cars:
        try:
            car_data = json.loads(car.find("script").text)
            fields = [
                car_data["brand"]["name"]["name"],  # brand
                car_data["model"]["name"],  # model
                car_data["color"],  # color
                car_data["fuelEfficiency"],  # mpg
                car_data["fuelType"]["name"],  # fuel_type
                car_data["name"],  # full_name
                car_data["offers"]["price"],  # price
                car_data["mileageFromOdometer"]["value"],  # mileage
                car_data["productionDate"],  # year
            ]
        except AttributeError:
            pass
        car_writer.writerow({fn: f for fn, f in zip(fieldnames, fields)})
#+end_src

The full [[file:used_cars.csv][csv file]] is included in the repo as well.


* Putting it in Google Sheets
Next we made a [[https://docs.google.com/spreadsheets/d/1VEYTMBuIWFt2X5XopD38vzNOdpNpxNt0ubLgfhLMj_8/edit?usp=sharing][data dashboard]] using google sheets. We settling on creating the following Graphs.

| Data            | Chart Type     |
|-----------------+----------------|
| Make            | Horizontal Bar |
| Color           | Horizontal Bar |
| Average MPG     | Historgram     |
| Engine Type     | Pie            |
| Miles vs. Price | Scatter Plot   |

We did explore some other relationships like Year vs Price, and MPG vs Price, but there was no relationship.
