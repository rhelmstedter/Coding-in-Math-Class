#+title: Used Cars
#+author: Russell Helmstedter
#+date: <2024-03-06 Wed>

* Used Car Data
The inspiration for this came from the following problem from [[http://cpm.org][CPM]].

HOW MUCH IS THAT CAR?

Nate and Rick were discussing cars again.  Nate claimed that cars with low odometer readings were more expensive than cars with higher odometer readings.  His evidence was that his car with 23,000 miles was worth more than Rick's car with 31,000 miles. To investigate Nate's claim, the boys collected data from several car advertisements and found the information in the table at right. Does the information in the table support Nate's claim?  That is, do you believe Nate's claim that cars with a lower odometer reading cost more money?

| Odometer Reading | Price  |
|------------------+--------|
| 35,000           | 38,000 |
| 55,000           | 16,000 |
| 6,000            | 50,000 |
| 28,000           | 30,000 |
| 50,000           | 26,000 |
| 31,000           | 35,000 |
| 15,000           | 28,000 |
| 99,000           | 10,000 |
| 99,000           | 13,000 |

I like this problem, but I thought it would be nicer to use actual data. So I built a webscaper for [[https://www.autotrader.com][Autotrader.com]].

Here is the [[file:used_cars.py][full Script]].

* A Breakdown of the Code

** The Imports

#+begin_src python exports: code

import requests
import json
from bs4 import BeautifulSoup
import csv
from pprint import pprint as pp
#+end_src


** The Soup

#+begin_src python exports: code
URL = "https://www.autotrader.com/cars-for-sale/ventura-ca?newSearch=false&numRecords=100&zip=93001"
page = requests.get(URL)

soup = BeautifulSoup(page.content, "html.parser")
cars = soup.find_all("div", class_="col-xs-12 display-flex col-sm-4")
#+end_src

** The CSV File
#+begin_src python exports: code
with open("used_cars.csv", mode="w") as used_car_db:
    fieldnames = [
        "brand",
        "model",
        "color",
        "mpg",
        "fuel_type",
        "full_name",
        "price",
        "mileage",
        "year",
    ]
    car_writer = csv.DictWriter(used_car_db, fieldnames=fieldnames)
    for car in cars[:3]:
        try:
            car_data = json.loads(car.find("script").text)
            pp(car_data)
            fields = [
                car_data["brand"]["name"]["name"],  # brand
                car_data["model"]["name"],  # model
                car_data["color"],  # color
                car_data["fuelEfficiency"],  # mpg
                car_data["fuelType"]["name"],  # fuel_type
                car_data["name"],  # full_name
                car_data["offers"]["price"],  # price
                car_data["mileageFromOdometer"]["value"],  # mileage
                car_data["productionDate"],  # year
            ]
        except AttributeError:
            pass
        car_writer.writerow({fn: f for fn, f in zip(fieldnames, fields)})
#+end_src

* Putting it in Google Sheets
Next we made a data dashboard using google sheets.
